//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.05.25 at 12:29:34 PM EEST 
//


package com.aorkado.railml;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;


/**
 * A controller is an individual terminal, commonly a workstation, that can control the interlocking. The controller is normally situated in a control centre. railML provides a logical link between an interlocking and the individual controller. The user can attach useful data to this link, such as addresses that may be granted control over this IL. railML will not define the nature of the addresses, i.e IP-addresses or hexadecimal address of terminals that communicate with the IL via some serial bus. The protocol (IP, UDP, serial, parallel) is irrelevant to railML. Note that a Control Centre (DE: Leitstelle, FR: Poste de controle, NL: VL-post) is likely to control multiple interlockings and vice versa, one interlocking can be controlled from multiple control centres, an n:m relation. This implies that a control centre can have multiple controllers, defined as a terminal from which a signal man controls an interlocking. The IL is unaware of the Control Centre but aware of the controller.
 * 
 * <p>Java class for Controller complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Controller"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{https://www.railml.org/schemas/3.2}ComputerNode"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="controlledAssets" type="{https://www.railml.org/schemas/3.2}ControlledAssets"/&gt;
 *         &lt;element name="routeSequences" type="{https://www.railml.org/schemas/3.2}RouteSequences" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;anyAttribute namespace='##other'/&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Controller", propOrder = {
    "controlledAssets",
    "routeSequences"
})
public class Controller
    extends ComputerNode
{

    @XmlElement(required = true)
    protected ControlledAssets controlledAssets;
    protected RouteSequences routeSequences;

    /**
     * Gets the value of the controlledAssets property.
     * 
     * @return
     *     possible object is
     *     {@link ControlledAssets }
     *     
     */
    public ControlledAssets getControlledAssets() {
        return controlledAssets;
    }

    /**
     * Sets the value of the controlledAssets property.
     * 
     * @param value
     *     allowed object is
     *     {@link ControlledAssets }
     *     
     */
    public void setControlledAssets(ControlledAssets value) {
        this.controlledAssets = value;
    }

    /**
     * Gets the value of the routeSequences property.
     * 
     * @return
     *     possible object is
     *     {@link RouteSequences }
     *     
     */
    public RouteSequences getRouteSequences() {
        return routeSequences;
    }

    /**
     * Sets the value of the routeSequences property.
     * 
     * @param value
     *     allowed object is
     *     {@link RouteSequences }
     *     
     */
    public void setRouteSequences(RouteSequences value) {
        this.routeSequences = value;
    }

}
