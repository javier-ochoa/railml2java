//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.05.25 at 12:29:34 PM EEST 
//


package com.aorkado.railml;

import java.util.ArrayList;
import java.util.List;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for FunctionalInfrastructureEntity complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FunctionalInfrastructureEntity"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{https://www.railml.org/schemas/3.2}EntityIS"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="designator" type="{https://www.railml.org/schemas/3.2}Designator" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="external" type="{https://www.railml.org/schemas/3.2}External" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="typeDesignator" type="{https://www.railml.org/schemas/3.2}TypeDesignator" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;anyAttribute namespace='##other'/&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FunctionalInfrastructureEntity", propOrder = {
    "designator",
    "external",
    "typeDesignator"
})
@XmlSeeAlso({
    Balise.class,
    BaliseGroup.class,
    DerailerIS.class,
    Detector.class,
    ElectrificationSection.class,
    EtcsArea.class,
    EtcsLevelTransition.class,
    KeyLockIS.class,
    Line.class,
    LoadingGauge.class,
    MileageChange.class,
    OperationalPoint.class,
    Platform.class,
    PlatformEdge.class,
    RbcBorder.class,
    RestrictionArea.class,
    ServiceSection.class,
    SignalIS.class,
    SpeedSection.class,
    StoppingPlace.class,
    Track.class,
    TrackBed.class,
    TrackGauge.class,
    TrackNode.class,
    TrainDetectionElement.class,
    TrainProtectionElement.class,
    TrainRadio.class,
    TunnelGateIS.class,
    WeightLimit.class,
    XCrossing.class
})
public abstract class FunctionalInfrastructureEntity
    extends EntityIS
{

    protected List<Designator> designator;
    protected List<External> external;
    protected List<TypeDesignator> typeDesignator;

    /**
     * Gets the value of the designator property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the designator property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDesignator().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Designator }
     * 
     * 
     */
    public List<Designator> getDesignator() {
        if (designator == null) {
            designator = new ArrayList<Designator>();
        }
        return this.designator;
    }

    /**
     * Gets the value of the external property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the external property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExternal().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link External }
     * 
     * 
     */
    public List<External> getExternal() {
        if (external == null) {
            external = new ArrayList<External>();
        }
        return this.external;
    }

    /**
     * Gets the value of the typeDesignator property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the Jakarta XML Binding object.
     * This is why there is not a <CODE>set</CODE> method for the typeDesignator property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTypeDesignator().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TypeDesignator }
     * 
     * 
     */
    public List<TypeDesignator> getTypeDesignator() {
        if (typeDesignator == null) {
            typeDesignator = new ArrayList<TypeDesignator>();
        }
        return this.typeDesignator;
    }

}
