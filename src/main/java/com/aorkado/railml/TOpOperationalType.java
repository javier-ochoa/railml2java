//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.05.25 at 12:29:34 PM EEST 
//


package com.aorkado.railml;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tOpOperationalType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="tOpOperationalType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="depot"/&gt;
 *     &lt;enumeration value="block"/&gt;
 *     &lt;enumeration value="siding"/&gt;
 *     &lt;enumeration value="borderPoint"/&gt;
 *     &lt;enumeration value="crossover"/&gt;
 *     &lt;enumeration value="junction"/&gt;
 *     &lt;enumeration value="station"/&gt;
 *     &lt;enumeration value="stoppingPoint"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "tOpOperationalType")
@XmlEnum
public enum TOpOperationalType {


    /**
     * an operational point where railway vehicles can start and end
     * 
     */
    @XmlEnumValue("depot")
    DEPOT("depot"),

    /**
     * on operational point where the spacing of trains is monitored; can be a block signal (mainly unstaffed and automated) or a block post (mainly staffed)
     * 
     */
    @XmlEnumValue("block")
    BLOCK("block"),

    /**
     * an operational point to collect and deliver of cargo wagons to build trains, but not for train operation
     * 
     */
    @XmlEnumValue("siding")
    SIDING("siding"),

    /**
     * operational point is a border point (e.g. at national border)
     * 
     */
    @XmlEnumValue("borderPoint")
    BORDER_POINT("borderPoint"),

    /**
     * a connection between two tracks of a double-track line
     * 
     */
    @XmlEnumValue("crossover")
    CROSSOVER("crossover"),

    /**
     * joining/splitting of two lines
     * 
     */
    @XmlEnumValue("junction")
    JUNCTION("junction"),

    /**
     * a usual station for beginning, ending, overtaking of trains with passing tracks, etc.
     * 
     */
    @XmlEnumValue("station")
    STATION("station"),

    /**
     * an operational point without signals, switches, additional tracks where trains start, stop or end e. g. for passenger exchange
     * 
     */
    @XmlEnumValue("stoppingPoint")
    STOPPING_POINT("stoppingPoint");
    private final String value;

    TOpOperationalType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TOpOperationalType fromValue(String v) {
        for (TOpOperationalType c: TOpOperationalType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
