//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.05.25 at 11:54:17 AM EEST 
//


package railml;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tSwitchType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="tSwitchType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="doubleSwitchCrossing"/&gt;
 *     &lt;enumeration value="switchCrossingPart"/&gt;
 *     &lt;enumeration value="insideCurvedSwitch"/&gt;
 *     &lt;enumeration value="ordinarySwitch"/&gt;
 *     &lt;enumeration value="outsideCurvedSwitch"/&gt;
 *     &lt;enumeration value="singleSwitchCrossing"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "tSwitchType")
@XmlEnum
public enum TSwitchType {

    @XmlEnumValue("doubleSwitchCrossing")
    DOUBLE_SWITCH_CROSSING("doubleSwitchCrossing"),

    /**
     * a switch being a part of a switch crossing
     * 
     */
    @XmlEnumValue("switchCrossingPart")
    SWITCH_CROSSING_PART("switchCrossingPart"),
    @XmlEnumValue("insideCurvedSwitch")
    INSIDE_CURVED_SWITCH("insideCurvedSwitch"),
    @XmlEnumValue("ordinarySwitch")
    ORDINARY_SWITCH("ordinarySwitch"),
    @XmlEnumValue("outsideCurvedSwitch")
    OUTSIDE_CURVED_SWITCH("outsideCurvedSwitch"),
    @XmlEnumValue("singleSwitchCrossing")
    SINGLE_SWITCH_CROSSING("singleSwitchCrossing");
    private final String value;

    TSwitchType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TSwitchType fromValue(String v) {
        for (TSwitchType c: TSwitchType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
