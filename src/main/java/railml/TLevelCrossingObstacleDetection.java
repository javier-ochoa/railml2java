//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.05.25 at 11:54:17 AM EEST 
//


package railml;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tLevelCrossingObstacleDetection.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="tLevelCrossingObstacleDetection"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="automatic"/&gt;
 *     &lt;enumeration value="manual"/&gt;
 *     &lt;enumeration value="none"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "tLevelCrossingObstacleDetection")
@XmlEnum
public enum TLevelCrossingObstacleDetection {


    /**
     * obstacle detection in level crossing danger area is done automatically (e.g. via radar)
     * 
     */
    @XmlEnumValue("automatic")
    AUTOMATIC("automatic"),

    /**
     * obstacle detection in level crossing danger area is done manually (e.g. via dispatcher looking)
     * 
     */
    @XmlEnumValue("manual")
    MANUAL("manual"),

    /**
     * there is no obstacle detection taking place in the level crossing danger area
     * 
     */
    @XmlEnumValue("none")
    NONE("none");
    private final String value;

    TLevelCrossingObstacleDetection(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TLevelCrossingObstacleDetection fromValue(String v) {
        for (TLevelCrossingObstacleDetection c: TLevelCrossingObstacleDetection.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
