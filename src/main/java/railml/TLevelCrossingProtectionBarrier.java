//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.05.25 at 11:54:17 AM EEST 
//


package railml;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tLevelCrossingProtectionBarrier.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="tLevelCrossingProtectionBarrier"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="doubleHalfBarrier"/&gt;
 *     &lt;enumeration value="none"/&gt;
 *     &lt;enumeration value="singleFullBarrier"/&gt;
 *     &lt;enumeration value="singleHalfBarrier"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "tLevelCrossingProtectionBarrier")
@XmlEnum
public enum TLevelCrossingProtectionBarrier {


    /**
     * protection of the level crossing with half barriers on entry and exit side
     * 
     */
    @XmlEnumValue("doubleHalfBarrier")
    DOUBLE_HALF_BARRIER("doubleHalfBarrier"),

    /**
     * no barriers
     * 
     */
    @XmlEnumValue("none")
    NONE("none"),

    /**
     * protection of the level crossing with full barriers
     * 
     */
    @XmlEnumValue("singleFullBarrier")
    SINGLE_FULL_BARRIER("singleFullBarrier"),

    /**
     * protection of the level crossing with half barriers on entry side
     * 
     */
    @XmlEnumValue("singleHalfBarrier")
    SINGLE_HALF_BARRIER("singleHalfBarrier");
    private final String value;

    TLevelCrossingProtectionBarrier(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TLevelCrossingProtectionBarrier fromValue(String v) {
        for (TLevelCrossingProtectionBarrier c: TLevelCrossingProtectionBarrier.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
