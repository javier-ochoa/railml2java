//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.05.25 at 11:54:17 AM EEST 
//


package railml;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tTrainDetectionElementType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="tTrainDetectionElementType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="axleCounter"/&gt;
 *     &lt;enumeration value="axleCountingCircuit"/&gt;
 *     &lt;enumeration value="clearancePoint"/&gt;
 *     &lt;enumeration value="insulatedRailJoint"/&gt;
 *     &lt;enumeration value="trackCircuit"/&gt;
 *     &lt;enumeration value="virtualClearancePoint"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "tTrainDetectionElementType")
@XmlEnum
public enum TTrainDetectionElementType {

    @XmlEnumValue("axleCounter")
    AXLE_COUNTER("axleCounter"),
    @XmlEnumValue("axleCountingCircuit")
    AXLE_COUNTING_CIRCUIT("axleCountingCircuit"),
    @XmlEnumValue("clearancePoint")
    CLEARANCE_POINT("clearancePoint"),
    @XmlEnumValue("insulatedRailJoint")
    INSULATED_RAIL_JOINT("insulatedRailJoint"),
    @XmlEnumValue("trackCircuit")
    TRACK_CIRCUIT("trackCircuit"),
    @XmlEnumValue("virtualClearancePoint")
    VIRTUAL_CLEARANCE_POINT("virtualClearancePoint");
    private final String value;

    TTrainDetectionElementType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TTrainDetectionElementType fromValue(String v) {
        for (TTrainDetectionElementType c: TTrainDetectionElementType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
