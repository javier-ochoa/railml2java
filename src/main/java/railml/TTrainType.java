//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.05.25 at 11:54:17 AM EEST 
//


package railml;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for tTrainType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="tTrainType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="all"/&gt;
 *     &lt;enumeration value="freight"/&gt;
 *     &lt;enumeration value="mixed"/&gt;
 *     &lt;enumeration value="passenger"/&gt;
 *     &lt;enumeration value="tiltingPassenger"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "tTrainType")
@XmlEnum
public enum TTrainType {


    /**
     * use value 'all' to specify that the speed profile is valid for all types of train
     * 
     */
    @XmlEnumValue("all")
    ALL("all"),

    /**
     * used to specify that the speed profile is valid for freight trains
     * 
     */
    @XmlEnumValue("freight")
    FREIGHT("freight"),

    /**
     * a mixed train includes passenger and freight waggons
     * 
     */
    @XmlEnumValue("mixed")
    MIXED("mixed"),

    /**
     * used to specify that the speed profile is valid for passenger trains
     * 
     */
    @XmlEnumValue("passenger")
    PASSENGER("passenger"),

    /**
     * DEPRECATED; use tilting element instead
     * 
     */
    @XmlEnumValue("tiltingPassenger")
    TILTING_PASSENGER("tiltingPassenger");
    private final String value;

    TTrainType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TTrainType fromValue(String v) {
        for (TTrainType c: TTrainType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
